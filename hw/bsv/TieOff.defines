// Copyright (c) 2014 Cornell University.

// Permission is hereby granted, free of charge, to any person
// obtaining a copy of this software and associated documentation
// files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use, copy,
// modify, merge, publish, distribute, sublicense, and/or sell copies
// of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
// BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

`define TIEOFF_GET(PARAM) \
instance TieOff#(Get#(PARAM)); \
   module mkTieOff(Get#(PARAM) ifc, Empty unused); \
      let verbose = True; \
      rule tieoff(True); \
         let v <- ifc.get; \
         if (verbose) $display("(%0d) ", $time, fshow(v), " > /dev/null"); \
      endrule \
   endmodule \
endinstance

`define TIEOFF_PIPEOUT(CONSTR, PARAM) \
instance TieOff#(PipeOut#(PARAM)); \
   module mkTieOff(PipeOut#(PARAM) ifc, Empty unused); \
      let verbose = True; \
      rule tieoff(True); \
         let v <- toGet(ifc).get; \
         if (verbose) $display("(%0d) ", $time, CONSTR, fshow(v), " > /dev/null"); \
      endrule \
   endmodule \
endinstance

`define TIEOFF_CLIENT(PARAM1, PARAM2) \
instance TieOff#(Client#(PARAM1, PARAM2)); \
   module mkTieOff(Client#(PARAM1, PARAM2) ifc, Empty unused); \
      rule tieoff; \
         let v <- toGet(ifc.request).get; \
         $display("(%0d) ", $time, fshow(v), " > /dev/null"); \
      endrule \
   endmodule \
endinstance


